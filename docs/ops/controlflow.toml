[IF]
prototype = "IF x: ..."
short = "if `x` is not zero execute command"
description = """
If `x` is not zero execute command

#### Advanced `IF` / `ELIF` / `ELSE` usage

  1. Intermediate statements always run

    ```text
    SCRIPT 1:
    IF 0: 0        => do nothing
    TR.P 1         => always happens
    ELSE: TR.P 2   => else branch runs because of the previous IF
    ```

  2. `ELSE` without an `IF`

    ```text
    SCRIPT 1:
    ELSE: TR.P 1   => never runs, as there is no preceding IF
    ```


  3. `ELIF` without an `IF`

    ```text
    SCRIPT 1:
    ELIF 1: TR.P 1  => never runs, as there is no preceding IF
    ```

  4. Independent scripts

    ```text
    SCRIPT 1:
    IF 1: TR.P 1    => pulse output 1

    SCRIPT 2:
    ELSE: TR.P 2    => never runs regardless of what happens in script 1
                       (see example 2)
    ```

"""

[ELIF]
prototype = "ELIF x: ..."
short = "if all previous `IF` / `ELIF` fail, and `x` is not zero, execute command"

[ELSE]
prototype = "ELSE: ..."
short = "if all previous `IF` / `ELIF` fail, excute command"

[L]
prototype = "L x y: ..."
short = "run the command sequentially with `I` values from `x` to `y`"
description = """
Run the command sequentially with `I` values from `x` to `y`.

For example:

```
L 1 4: TR.PULSE I   => pulse outputs 1, 2, 3 and 4
L 4 1: TR.PULSE I   => pulse outputs 4, 3, 2 and 1
```
"""

[W]
prototype = "W x: ..."
short = "run the command while condition x is true"
description = """
Runs the command while the condition `x` is true or the loop iterations exceed 10000.

For example, to find the first iterated power of 2 greater than 100:

```
A 2
W LT A 100: A * A A 
```

A will be 256.
"""

[EVERY]
prototype = "EVERY x: ..."
short = "run the command every `x` times the command is called"
description = """
Runs the command every `x` times the line is executed.  This is tracked on a per-line basis, so each script can have 6 different "dividers".

Here is a 1-script clock divider:

```
EVERY 2: TR.P 1
EVERY 4: TR.P 2
EVERY 8: TR.P 3
EVERY 16: TR.P 4
```

The numbers do _not_ need to be evenly divisible by each other, so there is no problem with:

```
EVERY 2: TR.P 1
EVERY 3: TR.P 2
```
"""

[SKIP]
prototype = "SKIP x: ..."
short = "run the command every time except the `x`th time."
description = """
This is the corollary function to `EVERY`, essentially behaving as its exact opposite.
"""


[OTHER]
prototype = "OTHER: ..."
short = "runs the command when the previous `EVERY`/`SKIP` did not run its command."
description = """
`OTHER` can be used to do somthing alternately with a preceding `EVERY` or `SKIP` command.

For example, here is a script that alternates between two triggers to make a four-on-the-floor beat with hats between the beats:

```
EVERY 4: TR.P 1
OTHER: TR.P 2
```

You could add snares on beats 2 and 4 with:

```
SKIP 2: TR.P 3
```
"""

[SYNC]
prototype = "SYNC x"
short = "synchronizes _all_ `EVERY` and `SKIP` counters to offset `x`."
description = """
Causes all of the `EVERY` and `SYNC` counters to synchronize their offsets, respecting their individual divisor values.

Negative numbers will synchronize to to the divisor value, such that `SYNC -1` causes all every counters to be 1 number before their divisor, causing each `EVERY` to be true on its next call, and each `SKIP` to be false.
"""

[PROB]
prototype = "PROB x: ..."
short = "potentially execute command with probability `x` (0-100)"

[SCRIPT]
prototype = "SCRIPT"
prototype_set = "SCRIPT x"
short = "get current script number, or execute script `x` (1-8), recursion allowed"
description = """
Execute script `x` (1-8), recursion allowed.

There is a limit of 8 for the maximum number of nested calls to `SCRIPT` to stop infinite loops from locking up the Teletype.
"""

[SCENE]
prototype = "SCENE"
prototype_set = "SCENE x"
short = "get the current scene number, or load scene `x` (0-31)"
description = """
Load scene `x` (0-31).

Does _not_ execute the `I` script.
Will _not_ execute from the `I` script on scene load.  Will execute on subsequent calls to the `I` script.

**WARNING**: You will lose any unsaved changes to your scene.
"""

[KILL]
prototype = "KILL"
short = "clears stack, clears delays, cancels pulses, cancels slews, disables metronome"

[BREAK]
prototype = "BREAK"
aliases = ["BRK"]
short = "halts execution of the current script"
